import telebot
from telebot import types
import requests
from dotenv import dotenv_values
from threading import Thread
import logging

from db import subscribe, get_all_subscribers, get_subscriber, unsubscribe
from pooling import poolingStatus

logger = logging.getLogger("power-telegram-bot")
logging.basicConfig(filename="power-telegram-bot.log")

config = dotenv_values(".env")
bot = telebot.TeleBot(config.get("BOT_TOKEN"))
# bot.delete_my_commands()

GET_STATUS_BUTTON = {"text": "–©–æ –ø–æ —Å–≤—ñ—Ç–ª—É?", "code": "1"}
SUBSCRIBE_BUTTON = {"text": "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", "code": "2"}
UNSUBSCRIBE_BUTTON = {"text": "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", "code": "3"}

greating = """
–í—ñ—Ç–∞—é! 
–Ø –º–æ–∂—É –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å –¥–ª—è –≤–∞—Å —á–∏ —î —Å–≤—ñ—Ç–ª–æ –≤ –¥–æ–º—ñ. –Ø –æ—Ç—Ä–∏–º—É—é –¥–∞–Ω–Ω—ñ –∑ –µ–ª–µ–∫—Ç—Ä–æ–º–µ—Ä–µ–∂—ñ 
–æ–¥–Ω—ñ—î—ó —ñ–∑ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –¥–æ–º—ñ –º–∞–π–∂–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ. 

–Ü–Ω–æ–¥—ñ —è –º–æ–∂—É –ø–æ–º–∏–ª—è—Ç–∏—Å—å. –ß–æ–º—É —Ü–µ –º–æ–∂–µ —Ç—Ä–∞–ø–∏—Ç–∏—Å—å? –¢–æ–º—É —â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. 
–¢–µ—Ö–Ω—ñ—á–Ω–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Ä—ñ–∑–Ω–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞.

–ê —â–µ —è –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–ª–∏ —Å–≤—ñ—Ç–ª–æ –∑ º—è–≤–ª—è—î—Ç—å—Å—è —á–∏ –∑–Ω–∏–∫–∞—î. –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å"
–∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe
"""

THANKS_FOR_SUBSCRIPTION = "–î—è–∫—É—é —â–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è"

YOU_HAVE_SUBSCRIBED = "–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ"

UNSIBSCRIBE_MESSAGE = "–ú–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏ –≤–∞—Å. –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
UNSIBSCRIBE_MESSAGE_NO_USER = "–°—Ö–æ–∂–µ —â–æ –º–∏ –≤–∞—Å –≤–∂–µ –≤—ñ–¥–ø–∏—Å–∞–ª–∏. –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"

ELECTRICITY_OK = "‚ö° üí° –°–≤—ñ—Ç–ª–æ —î!"
ELECTRICITY_FAIL = "ü™´ –°–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î"
ELECTRICITY_BACK = "‚ö°‚ö°‚ö° –°–≤—ñ—Ç–ª–æ –ø–æ–≤–µ—Ä–Ω—É–ª–æ—Å—å ‚ö°‚ö°‚ö°"
ELECTRICITY_GONE = "ü™´ü™´ü™´ –û—Ö, —è–∫ –ø—Ä–∏–∫—Ä–æ ü™´ü™´ü™´ –°—Ö–æ–∂–µ —â–æ –µ–ª–µ–∫—Ç—Ä–∏–∫–∞ –∑–Ω–∏–∫–ª–∞"


def get_markup(chat_id):
    # subscription = get_subscriber(chat_id)

    first_button = types.InlineKeyboardButton(text=GET_STATUS_BUTTON["text"], callback_data=GET_STATUS_BUTTON["code"])

    # if subscription is None:
    #     second_button = types.InlineKeyboardButton(text=SUBSCRIBE_BUTTON["text"], callback_data=SUBSCRIBE_BUTTON["code"])
    # else:
    #     second_button = types.InlineKeyboardButton(text=UNSUBSCRIBE_BUTTON["text"], callback_data=UNSUBSCRIBE_BUTTON["code"])

    markup = types.InlineKeyboardMarkup()
    markup.row(first_button)

    return markup


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    chat_id = message.chat.id

    bot.reply_to(message, greating, reply_markup=get_markup(chat_id))


@bot.message_handler(commands=['menu'])
def send_menu(message):
    chat_id = message.chat.id

    bot.reply_to(message, "–ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=get_markup(chat_id))


@bot.message_handler(commands=['status'])
def send_status(message):
    bot.reply_to(message, get_status())


@bot.message_handler(commands=['subscribe'])
def send_subscribe(message):
    bot.reply_to(message, subscribe_user(message))


@bot.message_handler(commands=['unsubscribe'])
def send_unsubscribe(message):
    bot.reply_to(message, unsubscribe_user(message))


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == GET_STATUS_BUTTON["code"]:
        bot.send_message(call.message.chat.id, get_status())
    elif call.data == SUBSCRIBE_BUTTON["code"]:
        text = subscribe_user(call.message)
        bot.send_message(call.message.chat.id, text)
    elif call.data == UNSUBSCRIBE_BUTTON["code"]:
        text = unsubscribe_user(call.message)
        bot.send_message(call.message.chat.id, text)

    bot.answer_callback_query(call.id)  # Acknowledge the callback query

@bot.message_handler(commands=['ping'])
def send_welcome(message):
    notify(False)


def get_status():
    try:
        response = requests.get(config.get("GET_STATUS_ENDPOINT"))
        res = response.json()

        if res["hasElectricity"] is True:
            return ELECTRICITY_OK
        else:
            return ELECTRICITY_FAIL
    except requests.exceptions.RequestException as e:
        logger.error(f"Get status request failed: {e}")


def subscribe_user(message):
    chat_id = message.chat.id
    username = message.from_user.username

    subscription = get_subscriber(chat_id)

    if subscription is None:
        subscribe(chat_id, username)
        return THANKS_FOR_SUBSCRIPTION
    else:
        return YOU_HAVE_SUBSCRIBED


def unsubscribe_user(message):
    chat_id = message.chat.id

    if unsubscribe(chat_id):
        return UNSIBSCRIBE_MESSAGE
    else:
        return UNSIBSCRIBE_MESSAGE_NO_USER


def notify(hasElectricuty):
    if hasElectricuty is True:
        message = ELECTRICITY_BACK
    else:
        message = ELECTRICITY_GONE

    subscribed_users = get_all_subscribers()

    for user in subscribed_users:
        bot.send_message(user.chat_id, message)


# Start the bot polling in a separate thread
def start_bot():
    bot.polling()


if __name__ == '__main__':
    # Start the bot in a separate thread
    bot_thread = Thread(target=start_bot)
    bot_thread.start()

    poolingStatus(config.get("GET_STATUS_ENDPOINT"), notify)
