import telebot
from telebot import types
import requests
from dotenv import dotenv_values
from threading import Thread

from db import create_user, get_all_users, get_user_by_username, delete_user
from pooling import poolingStatus

config = dotenv_values(".env")
bot = telebot.TeleBot(config.get("BOT_TOKEN"))
bot.delete_my_commands()

GET_STATUS = "–©–æ –ø–æ —Å–≤—ñ—Ç–ª—É?"
SUBSCRIBE = "–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏"
UNSUBSCRIBE = "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å"

greating = """
    –í—ñ—Ç–∞—é! 
–Ø –º–æ–∂—É –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å –¥–ª—è –≤–∞—Å —á–∏ —î —Å–≤—ñ—Ç–ª–æ –≤ –¥–æ–º—ñ.

–ê —â–µ —è –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–ª–∏ —Å–≤—ñ—Ç–ª–æ –∑ º—è–≤–ª—è—î—Ç—å—Å—è —á–∏ –∑–Ω–∏–∫–∞—î.
"""

THANKS_FOR_SUBSCRIPTION = "–î—è–∫—É—é —â–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è"

YOU_HAVE_SUBSCRIBED = "–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ"

UNSIBSCRIBE_MESSAGE = "–ú–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏ –≤–∞—Å. –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"


def get_markup(chat_id):
    subscription = get_user_by_username(chat_id)

    first_button = types.KeyboardButton(GET_STATUS)

    if subscription is None:
        second_button = types.KeyboardButton(SUBSCRIBE)
    else:
        second_button = types.KeyboardButton(UNSUBSCRIBE)

    markup = types.ReplyKeyboardMarkup()
    markup.row(first_button, second_button)

    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    chat_id = message.chat.id

    bot.reply_to(message, greating, reply_markup=get_markup(chat_id))


@bot.message_handler(commands=['options'])
def send_options(message):
    markup = types.InlineKeyboardMarkup()
    button_a = types.InlineKeyboardButton('Option A', callback_data='A')
    button_b = types.InlineKeyboardButton('Option B', callback_data='B')
    markup.add(button_a, button_b)
    bot.send_message(message.chat.id, "Choose an option:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == 'A':
        bot.answer_callback_query(call.id, "You chose Option A")
    elif call.data == 'B':
        bot.answer_callback_query(call.id, "You chose Option B")


@bot.message_handler(func=lambda message: message.text == GET_STATUS)
def get_status(message):
    response = requests.get(config.get("GET_STATUS_ENDPOINT"))

    if response.status_code == 200:
        bot.reply_to(message, "üí°üí°üí° –°–≤—ñ—Ç–ª–æ —î!")
    else:
        bot.reply_to(message, "üî¶ –°–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î. –ì–æ—Ç—É–π—Ç–µ –ª—ñ—Ö—Ç–∞—Ä–∏–∫.")


@bot.message_handler(func=lambda message: message.text == SUBSCRIBE)
def subscribe(message):
    chat_id = message.chat.id
    username = message.from_user.username

    subscription = get_user_by_username(chat_id)

    if subscription is None:
        print(subscription)
        create_user(chat_id, username)
        bot.send_message(chat_id, THANKS_FOR_SUBSCRIPTION, reply_markup=get_markup(chat_id))
    else:
        bot.send_message(chat_id, YOU_HAVE_SUBSCRIBED, reply_markup=get_markup(chat_id))


@bot.message_handler(func=lambda message: message.text == UNSUBSCRIBE)
def unsubscribe(message):
    chat_id = message.chat.id

    if delete_user(chat_id):
        bot.send_message(chat_id, UNSIBSCRIBE_MESSAGE, reply_markup=get_markup(chat_id))
    else:
        bot.send_message(chat_id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=get_markup(chat_id))


def notify(hasElectricuty):
    if hasElectricuty is True:
        message = "–°–≤—ñ—Ç–ª–æ!"
    else:
        message = "–°–≤—ñ—Ç–ª–æ –≤—Å–µ :("

    subscribed_users = get_all_users()

    for user in subscribed_users:
        bot.send_message(user, message)


# Start the bot polling in a separate thread
def start_bot():
    bot.polling()


if __name__ == '__main__':
    # Start the bot in a separate thread
    bot_thread = Thread(target=start_bot)
    bot_thread.start()

    poolingStatus(config.get("GET_STATUS_ENDPOINT"), notify)
